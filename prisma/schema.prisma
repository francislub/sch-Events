// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  PARENT
  STUDENT
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  password       String
  role           UserRole
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations based on role
  teacherProfile Teacher?
  parentProfile  Parent?
  studentProfile Student?
  adminProfile   Admin?

  // Messages
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Teacher {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  department    String
  qualification String
  contactNumber String?
  address       String?
  classes       Class[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Parent {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactNumber String?
  address       String?
  relationship  String?   // Father, Mother, Guardian, etc.
  children      Student[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Admin {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  position      String
  contactNumber String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Student {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?      @unique @db.ObjectId
  user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName      String
  lastName       String
  admissionNumber String      @unique
  dateOfBirth    DateTime
  gender         String
  enrollmentDate DateTime
  grade          String
  section        String
  address        String?
  parentId       String       @db.ObjectId
  parent         Parent       @relation(fields: [parentId], references: [id])
  classId        String       @db.ObjectId
  class          Class        @relation(fields: [classId], references: [id])
  attendances    Attendance[]
  grades         Grade[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Class {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  grade       String
  section     String
  teacherId   String       @db.ObjectId
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  students    Student[]
  schedule    Schedule[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Attendance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  status    String   // Present, Absent, Late
  studentId String   @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  subject   String
  term      String
  score     Float
  grade     String
  remarks   String?
  studentId String   @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  day       String
  startTime String
  endTime   String
  subject   String
  room      String
  classId   String   @db.ObjectId
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      String
  forRole   UserRole
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  isRead     Boolean  @default(false)
  senderId   String   @db.ObjectId
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId String   @db.ObjectId
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

